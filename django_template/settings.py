"""
Django settings for django_template project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from datetime import timedelta
from pathlib import Path

import structlog
from structlog.processors import CallsiteParameter

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-4q&08uxgx(9qa35j6%l!q6-##qo7dn7woit&d^y%(fi&6tyb--"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # 第三方框架
    "rest_framework",
    "django_filters",
    "drf_spectacular",
    # apps
    "apps.common",
    "apps.account",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "django_template.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "django_template.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    },
    "mysql": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "django_template",
        "USER": "django_template",
        "PASSWORD": "",
        "HOST": "127.0.0.1",
        "PORT": "3306",
        "POOL_OPTIONS": {
            "charset": "utf8mb4",
            "POOL_SIZE": 50,
            "MAX_OVERFLOW": 50,
        },
        "OPTIONS": {
            "init_command": "SET foreign_key_checks = 0;",
            "charset": "utf8",
        },
        "ATOMIC_REQUESTS": True,
    },
}

# redis : django_redis
# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": "redis://127.0.0.1:6379/1",
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#             "CONNECTION_POOL_KWARGS": {
#                 "max_connections": 100,
#                 "health_check_interval": 30,
#             },
#         },
#         "KEY_PREFIX": "{{ project_name }}",
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "zh-hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

APPEND_SLASH = False

# rest_framework 配置
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": ("rest_framework_simplejwt.authentication.JWTAuthentication",),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "EXCEPTION_HANDLER": "django_template.drf.exceptions.exception_handler",
    "DEFAULT_RENDERER_CLASSES": [
        "django_template.drf.renders.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
    # 分页
    # "DEFAULT_PAGINATION_CLASS": "utils.pagination.Pagination",
    # 查询
    # "DEFAULT_FILTER_BACKENDS": [
    #     # 设置排序过滤引擎
    #     "rest_framework.filters.OrderingFilter",
    #     # 设置查询过滤引擎
    #     "django_filters.rest_framework.backends.DjangoFilterBackend"
    # ],
}

AUTHENTICATION_BACKENDS = [
    "apps.account.backends.PhoneModelBackend",
    "apps.account.backends.WeChatMPModelBackend",
    "apps.account.backends.WeChatModelBackend",
    "apps.account.backends.AppleModelBackend",
]

SIMPLE_JWT = {
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "id",
    "ACCESS_TOKEN_LIFETIME": timedelta(days=30),  # 配置过期时间
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
}

# 微信登录
WE_CHAT = {
    "domain": "https://api.weixin.qq.com",
    "appid": "",
    "secret": "",
    "token": "",  # Token
}

# apple 登录
APPLE = {
    "KEY_ID": "",
    "EXP": timedelta(days=30),
    "TEAM_ID": "",
    "CLIENT_ID": "",
    "PRIVATE_KEY": "",
    "ACCESS_TOKEN_URL": "https://appleid.apple.com/auth/token",
}

SPECTACULAR_SETTINGS = {
    "TITLE": "django_templates",
    "DESCRIPTION": "这是项目的API文档",
    "VERSION": "0.1.0",
    "SERVE_INCLUDE_SCHEMA": False,
    # 或者如果有统一的前缀，可以设置成
    "SCHEMA_PATH_PREFIX": "api/v1",
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "persistAuthorization": True,
        "displayOperationId": True,
    },
    # 修改图标
    # "SWAGGER_UI_FAVICON_HREF": "",
}

# 多数据库路由
# DATABASE_ROUTERS = [
#     "db.router.OtherRouter",
# ]

# Celery Configuration Options
# CELERY_TIMEZONE = 'Asia/Shanghai'
# CELERY_TASK_TRACK_STARTED = True
# CELERY_TASK_TIME_LIMIT = 60 * 60
# CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/2'
# CELERY_BROKER_URL = 'redis://127.0.0.1:6379/2'

ES = {"default": {"hosts": [{"host": "xxx.xxx.com", "port": 9200}], "auth": ("username", "password")}}


handlers = ["default"]
log_level = "DEBUG"

if not DEBUG:
    handlers.append("es")
    log_level = "INFO"

pre_chains = [
    structlog.contextvars.merge_contextvars,
    structlog.processors.TimeStamper(fmt="%Y-%m-%d %H:%M:%S", utc=False),
    structlog.processors.add_log_level,
    structlog.stdlib.add_logger_name,
    structlog.stdlib.PositionalArgumentsFormatter(),
    structlog.processors.CallsiteParameterAdder(
        [
            CallsiteParameter.PATHNAME,
            CallsiteParameter.MODULE,
            CallsiteParameter.LINENO,
            CallsiteParameter.FUNC_NAME,
        ]
    ),
    structlog.stdlib.ExtraAdder(),
    structlog.processors.StackInfoRenderer(),
    structlog.processors.format_exc_info,
]

# Configure for structlog
structlog.configure(
    context_class=dict,
    processors=[
        *pre_chains,
        structlog.stdlib.ProcessorFormatter.wrap_for_formatter,
    ],
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "console": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processors": [
                structlog.stdlib.ProcessorFormatter.remove_processors_meta,
                structlog.dev.ConsoleRenderer(colors=True),
            ],
            "foreign_pre_chain": pre_chains,
        },
        "json": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processors": [
                structlog.stdlib.ProcessorFormatter.remove_processors_meta,
            ],
            "foreign_pre_chain": pre_chains,
        },
    },
    "handlers": {
        "default": {
            "level": log_level,
            "class": "logging.StreamHandler",
            "formatter": "console",
        },
        # 使用es记录:  pip install CMRESHandler
        # 'es': {
        #     'level': 'INFO',
        #     'class': 'cmreslogging.handlers.CMRESHandler',
        #     'hosts': ES['default']['hosts'],
        #     'auth_type': CMRESHandler.AuthType.BASIC_AUTH,
        #     'auth_details': ES['default']['auth'],
        #     'es_index_name': ES_INDEX_NAME,
        #     'es_doc_type': 'doc',
        #     'flush_frequency_in_sec': 10,
        #     'raise_on_indexing_exceptions': True
        # },
    },
    "loggers": {
        "": {
            "handlers": handlers,
            "level": log_level,
            "propagate": False,
        },
        "django": {
            "handlers": handlers,
            "level": log_level,
            "propagate": False,
        },
        "gunicorn": {
            "handlers": handlers,
            "level": log_level,
        },
    },
}
